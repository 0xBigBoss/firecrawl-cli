name: Release

on:
  push:
    branches: [main] # For changesets version management and building/releasing

permissions:
  contents: write
  pull-requests: write

jobs:
  # Version management job (runs on main branch pushes)
  version:
    if: github.repository_owner == '0xbigboss'
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: bun run version
          publish: bun run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build job (runs only if changesets published a release)
  build:
    needs: version
    if: needs.version.outputs.published == 'true'
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x64
          - os: ubuntu-latest
            target: linux-x64
            build_target: bun-linux-x64

          # Linux ARM64
          - os: ubuntu-latest
            target: linux-arm64
            build_target: bun-linux-arm64

          # macOS x64
          - os: macos-latest
            target: darwin-x64
            build_target: bun-darwin-x64

          # macOS ARM64
          - os: macos-latest
            target: darwin-arm64
            build_target: bun-darwin-arm64

          # Windows x64
          - os: windows-latest
            target: windows-x64
            build_target: bun-windows-x64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build executable
        run: |
          bun build ./index.ts --compile --target=${{ matrix.build_target }} --outfile ./bin/fcrawl-${{ matrix.target }}
        shell: bash

      - name: Import Code Signing Certificate
        if: matrix.os == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

      - name: Code Sign and Notarize macOS Executable
        if: matrix.os == 'macos-latest'
        run: |
          # Code sign the binary with hardened runtime
          codesign --force --sign "${{ secrets.MACOS_SIGNING_IDENTITY }}" \
            --entitlements entitlements.plist \
            --options runtime \
            --timestamp \
            ./bin/fcrawl-${{ matrix.target }}

          # Verify signing
          codesign -vvv --verify ./bin/fcrawl-${{ matrix.target }}

          # Create a ZIP file for notarization (required by Apple)
          cd bin
          zip fcrawl-${{ matrix.target }}-notarize.zip fcrawl-${{ matrix.target }}
          cd ..

          # Submit for notarization
          xcrun notarytool submit ./bin/fcrawl-${{ matrix.target }}-notarize.zip \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_APP_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --wait

          # Clean up the zip file
          rm ./bin/fcrawl-${{ matrix.target }}-notarize.zip

          # Verify the binary passes Gatekeeper
          spctl -a -vv ./bin/fcrawl-${{ matrix.target }}

      - name: Verify Windows executable extension
        if: matrix.os == 'windows-latest'
        run: |
          # Bun automatically adds .exe extension on Windows, so just verify it exists
          if [ ! -f "./bin/fcrawl-${{ matrix.target }}.exe" ]; then
            echo "Expected .exe file not found, checking for file without extension..."
            if [ -f "./bin/fcrawl-${{ matrix.target }}" ]; then
              mv "./bin/fcrawl-${{ matrix.target }}" "./bin/fcrawl-${{ matrix.target }}.exe"
            else
              echo "Error: No executable found!"
              exit 1
            fi
          fi
          echo "Windows executable ready: ./bin/fcrawl-${{ matrix.target }}.exe"
        shell: bash

      - name: Test executable
        run: |
          # Only test native binaries (skip cross-compiled ones)
          RUNNER_ARCH=$(uname -m)
          TARGET_ARCH="${{ matrix.target }}"
          
          # Determine if this is a cross-compiled binary
          SKIP_TEST=false
          
          if [[ "$TARGET_ARCH" == "linux-arm64" && "$RUNNER_ARCH" == "x86_64" ]]; then
            SKIP_TEST=true
            echo "Skipping test: cross-compiled ARM64 binary on x64 Linux runner"
          elif [[ "$TARGET_ARCH" == "darwin-x64" && "$RUNNER_ARCH" == "arm64" ]]; then
            SKIP_TEST=true
            echo "Skipping test: cross-compiled x64 binary on ARM64 macOS runner"
          fi
          
          if [[ "$SKIP_TEST" == "true" ]]; then
            echo "Binary exists: $(ls -la ./bin/fcrawl-${{ matrix.target }}*)"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Testing Windows executable..."
            ./bin/fcrawl-${{ matrix.target }}.exe --version
          else
            echo "Testing native executable..."
            ./bin/fcrawl-${{ matrix.target }} --version
          fi
        shell: bash

      - name: Create archive
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cd bin && 7z a fcrawl-${{ matrix.target }}.zip fcrawl-${{ matrix.target }}.exe
          else
            cd bin && tar -czf fcrawl-${{ matrix.target }}.tar.gz fcrawl-${{ matrix.target }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fcrawl-${{ matrix.target }}
          path: |
            bin/fcrawl-${{ matrix.target }}.tar.gz
            bin/fcrawl-${{ matrix.target }}.zip

  # Release job (runs only if changesets published and build succeeded)
  release:
    needs: [version, build]
    if: needs.version.outputs.published == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: find artifacts -type f

      - name: Get tag name from package.json
        id: tag
        run: echo "tag=v$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT

      - name: Update Release with binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
          files: |
            artifacts/fcrawl-linux-x64/*
            artifacts/fcrawl-linux-arm64/*
            artifacts/fcrawl-darwin-x64/*
            artifacts/fcrawl-darwin-arm64/*
            artifacts/fcrawl-windows-x64/*
